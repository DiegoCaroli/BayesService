package com.diego.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONStreamAware;

import com.diego.BayesANDJess.BayesNet;
import com.diego.BayesANDJess.Decider;
import com.diego.BayesANDJess.JessEngine;
import com.diego.BayesANDJess.Observation;
import com.diego.BayesANDJess.Result;
import com.diego.BayesANDJess.Rule;
import com.diego.BayesANDJess.RuleCreator;
import com.diego.BayesANDJess.Value;
import com.diego.model.BayesNetStore;

@WebServlet("/CreateClpServlet")
public class CreateClpServlet extends HttpServlet {
	
	private static final String DIR_FILE = "Documents";
	public static String clpFile = "regoleProvaExtraction.clp";
	private PrintStream printer;
	private JessEngine engine;
	private String clpFilePath;
	
	protected void doGet(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
		
		final String LOG_TAG = "NULL_EXCEPTION";
		
		//create path server
		String appPath = getServletContext().getRealPath("");
		clpFilePath = appPath +  File.separator + DIR_FILE + File.separator + clpFile;
		
		//get file name
		String fileName = request.getParameter("filename");
		
		//log 
		if(fileName != null)
			System.out.println(LOG_TAG+": "+fileName);
		else
			System.out.println(LOG_TAG+": file name NULL");
		
		String[] evidenceValues = request.getParameterValues("evidence");
		
		if(evidenceValues == null)
			System.out.println(LOG_TAG+": evidences NULL");
		
		//get threshold
		double threshold = Double.parseDouble(request.getParameter("threshold"));
		
		//get obsertavions
		String[] observationValues = request.getParameterValues("observation");
		
		//get fetchs
		String[] fetchsValues = request.getParameterValues("fetch");
				
		//create net
		BayesNet bayesNet = BayesNetStore.getInstance().getNet(fileName);
		
		//fill array evidences
		ArrayList<String> evidences = new ArrayList<>();
		for (String evidence: evidenceValues) {
			evidences.add(evidence);
		}
		
		//fill array observations
		ArrayList<Observation> observations = new ArrayList<Observation>();
		for (String observation: observationValues) {
			String[] tokens = observation.split(":");
	        observations.add(new Observation(tokens[0], tokens[1]));
		}
		
		//fill array fetchs
		ArrayList<String> toFetchs = new ArrayList<>();
		for (String fetch: fetchsValues) {
			toFetchs.add(fetch);
		}
		
		//create jessEngine
		engine = new JessEngine();
		
		//write file clp
		writeFile();
		
		//log 
		if(bayesNet == null)
			System.out.println(LOG_TAG+": bayesNet null");
		else
			System.out.println(LOG_TAG+": bayesNet null");
		
		if(evidences == null)
			System.out.println(LOG_TAG+": evidences null");
		else
			System.out.println(LOG_TAG+": evidences null");
		
		//response.getWriter().println();
		
		computeRulesWithThreshold(bayesNet, evidences, true, threshold);
		
		String result = engine.infer(observations, toFetchs);
		
		response.setContentType("application/json");
        response.setCharacterEncoding("utf-8");
        PrintWriter out = response.getWriter();
        
        out.write(createJSON(result).toString());
        out.close();
	}
	
	private void writeFile() {
		File file = new File(clpFilePath);
		OutputStream outputStream;
		try{
			outputStream = new FileOutputStream(file);
			this.printer = new PrintStream(outputStream);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		printer.println(";; CLP file with autogenerated rules");
	}
	
	private void openFile() {
		File file = new File(clpFilePath);
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream(file);
			this.printer = new PrintStream(outputStream);
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		printer.println(";; CLP file with autogenerated rules");
	}
	
	private void writeTemplate(String toInfer) {
		printer.println(";; Template per risultato");
		printer.println("(deftemplate Result_"+toInfer);
		
		printer.println(" 	(slot "+toInfer+")");
		//slot reliability
		printer.println(" 	(slot Reliability)");
		printer.println(")"); //Chiusura template
	}
	
	public void computeRulesWithThreshold(BayesNet bn, ArrayList<String> evidences, boolean printInFile, double threshold){
		//TODO preliminary check on evidences
		//Check on printer
		if(printInFile && printer==null){ //Richiesta stampa ma file non creato
			openFile();
		}
		//TODO send command deftemplate
		
		if(evidences == null || evidences.size() == 0){
			//TODO `Print debug
		}
		ArrayList<Result> inferationResults = bn.inferEnumerate(evidences);
		Decider decider = new Decider();
		
		//Define templates
		ArrayList<String> nodesToInfer = bn.getNodesToInfer(evidences);
		for(int i=0; i<nodesToInfer.size(); i++){
			String node = nodesToInfer.get(i);
			if(printInFile)
				writeTemplate(node);
			if(engine != null)
				engine.addTemplate(node);
		}
		
		
		for(int i=0; i<inferationResults.size(); i++){
			if(printInFile)
				printer.println(";; Rule number "+(i+1));
			Result result = inferationResults.get(i);
			Value mostProbable = result.getMostProbableValue();
			
			if(mostProbable.getProbability() >= threshold){
				System.out.println("Soglia superata");
				Rule r = new Rule(result.getEvidence(), 
						result.getNode(),
						mostProbable.getOutcome(), 
						mostProbable.getProbability(),
						(i+1));
				if(printInFile)
					r.printRule(printer);
				if(engine!= null) //Un costruttore o l'altro sono usati
					r.addRuleInJess(engine);
			}else{
				System.out.println("Soglia non superata");
				Value choosen = decider.choose(result.getValues());
				Rule r = new Rule(result.getEvidence(), 
						result.getNode(),
						choosen.getOutcome(), 
						choosen.getProbability(),
						(i+1));
				if(printInFile)
					r.printRule(printer);
				if(engine!= null) //Un costruttore o l'altro sono usati
					r.addRuleInJess(engine);
			}
		}	
	}
	
	private JSONObject createJSON(String result){
		JSONObject json = new JSONObject();
		
		if (result == null || result.equals("")) {
			json.put("result", "No result");
		} else {
			json.put("result", result);
		}
		
		return json;
	}
	
}
